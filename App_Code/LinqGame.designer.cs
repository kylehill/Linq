#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KHGames")]
public partial class LinqGameDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertLinqGamePlayer(LinqGamePlayer instance);
  partial void UpdateLinqGamePlayer(LinqGamePlayer instance);
  partial void DeleteLinqGamePlayer(LinqGamePlayer instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  partial void InsertLinqGame(LinqGame instance);
  partial void UpdateLinqGame(LinqGame instance);
  partial void DeleteLinqGame(LinqGame instance);
  partial void InsertLinqGameSeries(LinqGameSeries instance);
  partial void UpdateLinqGameSeries(LinqGameSeries instance);
  partial void DeleteLinqGameSeries(LinqGameSeries instance);
  partial void InsertLinqRoundResult(LinqRoundResult instance);
  partial void UpdateLinqRoundResult(LinqRoundResult instance);
  partial void DeleteLinqRoundResult(LinqRoundResult instance);
  partial void InsertLinqSeriesRound(LinqSeriesRound instance);
  partial void UpdateLinqSeriesRound(LinqSeriesRound instance);
  partial void DeleteLinqSeriesRound(LinqSeriesRound instance);
  partial void InsertLinqWord(LinqWord instance);
  partial void UpdateLinqWord(LinqWord instance);
  partial void DeleteLinqWord(LinqWord instance);
  partial void InsertOption(Option instance);
  partial void UpdateOption(Option instance);
  partial void DeleteOption(Option instance);
  partial void InsertSetting(Setting instance);
  partial void UpdateSetting(Setting instance);
  partial void DeleteSetting(Setting instance);
  partial void InsertLinqGameChat(LinqGameChat instance);
  partial void UpdateLinqGameChat(LinqGameChat instance);
  partial void DeleteLinqGameChat(LinqGameChat instance);
  partial void InsertUserSession(UserSession instance);
  partial void UpdateUserSession(UserSession instance);
  partial void DeleteUserSession(UserSession instance);
  #endregion
	
	public LinqGameDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KHGamesConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public LinqGameDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinqGameDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinqGameDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public LinqGameDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<LinqGamePlayer> LinqGamePlayers
	{
		get
		{
			return this.GetTable<LinqGamePlayer>();
		}
	}
	
	public System.Data.Linq.Table<User> Users
	{
		get
		{
			return this.GetTable<User>();
		}
	}
	
	public System.Data.Linq.Table<LinqGame> LinqGames
	{
		get
		{
			return this.GetTable<LinqGame>();
		}
	}
	
	public System.Data.Linq.Table<LinqGameSeries> LinqGameSeries
	{
		get
		{
			return this.GetTable<LinqGameSeries>();
		}
	}
	
	public System.Data.Linq.Table<LinqRoundGuess> LinqRoundGuesses
	{
		get
		{
			return this.GetTable<LinqRoundGuess>();
		}
	}
	
	public System.Data.Linq.Table<LinqRoundResult> LinqRoundResults
	{
		get
		{
			return this.GetTable<LinqRoundResult>();
		}
	}
	
	public System.Data.Linq.Table<LinqSeriesRound> LinqSeriesRounds
	{
		get
		{
			return this.GetTable<LinqSeriesRound>();
		}
	}
	
	public System.Data.Linq.Table<LinqSeriesScore> LinqSeriesScores
	{
		get
		{
			return this.GetTable<LinqSeriesScore>();
		}
	}
	
	public System.Data.Linq.Table<LinqSeriesSpy> LinqSeriesSpies
	{
		get
		{
			return this.GetTable<LinqSeriesSpy>();
		}
	}
	
	public System.Data.Linq.Table<LinqWord> LinqWords
	{
		get
		{
			return this.GetTable<LinqWord>();
		}
	}
	
	public System.Data.Linq.Table<Option> Options
	{
		get
		{
			return this.GetTable<Option>();
		}
	}
	
	public System.Data.Linq.Table<Preference> Preferences
	{
		get
		{
			return this.GetTable<Preference>();
		}
	}
	
	public System.Data.Linq.Table<Setting> Settings
	{
		get
		{
			return this.GetTable<Setting>();
		}
	}
	
	public System.Data.Linq.Table<LinqGameChat> LinqGameChats
	{
		get
		{
			return this.GetTable<LinqGameChat>();
		}
	}
	
	public System.Data.Linq.Table<UserSession> UserSessions
	{
		get
		{
			return this.GetTable<UserSession>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqGamePlayers")]
public partial class LinqGamePlayer : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GamePlayerID;
	
	private int _UserID;
	
	private int _GameID;
	
	private bool _IsActive;
	
	private bool _IsJoined;
	
	private EntitySet<LinqRoundResult> _LinqRoundResults;
	
	private EntitySet<LinqSeriesRound> _LinqSeriesRounds;
	
	private EntityRef<User> _User;
	
	private EntityRef<LinqGame> _LinqGame;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGamePlayerIDChanging(int value);
    partial void OnGamePlayerIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsJoinedChanging(bool value);
    partial void OnIsJoinedChanged();
    #endregion
	
	public LinqGamePlayer()
	{
		this._LinqRoundResults = new EntitySet<LinqRoundResult>(new Action<LinqRoundResult>(this.attach_LinqRoundResults), new Action<LinqRoundResult>(this.detach_LinqRoundResults));
		this._LinqSeriesRounds = new EntitySet<LinqSeriesRound>(new Action<LinqSeriesRound>(this.attach_LinqSeriesRounds), new Action<LinqSeriesRound>(this.detach_LinqSeriesRounds));
		this._User = default(EntityRef<User>);
		this._LinqGame = default(EntityRef<LinqGame>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePlayerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GamePlayerID
	{
		get
		{
			return this._GamePlayerID;
		}
		set
		{
			if ((this._GamePlayerID != value))
			{
				this.OnGamePlayerIDChanging(value);
				this.SendPropertyChanging();
				this._GamePlayerID = value;
				this.SendPropertyChanged("GamePlayerID");
				this.OnGamePlayerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				if (this._LinqGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsJoined", DbType="Bit NOT NULL")]
	public bool IsJoined
	{
		get
		{
			return this._IsJoined;
		}
		set
		{
			if ((this._IsJoined != value))
			{
				this.OnIsJoinedChanging(value);
				this.SendPropertyChanging();
				this._IsJoined = value;
				this.SendPropertyChanged("IsJoined");
				this.OnIsJoinedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGamePlayer_LinqRoundResult", Storage="_LinqRoundResults", ThisKey="GamePlayerID", OtherKey="PlayerID")]
	public EntitySet<LinqRoundResult> LinqRoundResults
	{
		get
		{
			return this._LinqRoundResults;
		}
		set
		{
			this._LinqRoundResults.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGamePlayer_LinqSeriesRound", Storage="_LinqSeriesRounds", ThisKey="GamePlayerID", OtherKey="WaitingOnPlayer")]
	public EntitySet<LinqSeriesRound> LinqSeriesRounds
	{
		get
		{
			return this._LinqSeriesRounds;
		}
		set
		{
			this._LinqSeriesRounds.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LinqGamePlayer", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.LinqGamePlayers.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.LinqGamePlayers.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGame_LinqGamePlayer", Storage="_LinqGame", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
	public LinqGame LinqGame
	{
		get
		{
			return this._LinqGame.Entity;
		}
		set
		{
			LinqGame previousValue = this._LinqGame.Entity;
			if (((previousValue != value) 
						|| (this._LinqGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqGame.Entity = null;
					previousValue.LinqGamePlayers.Remove(this);
				}
				this._LinqGame.Entity = value;
				if ((value != null))
				{
					value.LinqGamePlayers.Add(this);
					this._GameID = value.GameID;
				}
				else
				{
					this._GameID = default(int);
				}
				this.SendPropertyChanged("LinqGame");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LinqRoundResults(LinqRoundResult entity)
	{
		this.SendPropertyChanging();
		entity.LinqGamePlayer = this;
	}
	
	private void detach_LinqRoundResults(LinqRoundResult entity)
	{
		this.SendPropertyChanging();
		entity.LinqGamePlayer = null;
	}
	
	private void attach_LinqSeriesRounds(LinqSeriesRound entity)
	{
		this.SendPropertyChanging();
		entity.LinqGamePlayer = this;
	}
	
	private void detach_LinqSeriesRounds(LinqSeriesRound entity)
	{
		this.SendPropertyChanging();
		entity.LinqGamePlayer = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.Users")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserID;
	
	private string _Nickname;
	
	private string _Email;
	
	private string _VerificationToken;
	
	private System.DateTime _JoinDate;
	
	private bool _IsAdmin;
	
	private EntitySet<LinqGamePlayer> _LinqGamePlayers;
	
	private EntitySet<LinqGame> _LinqGames;
	
	private EntitySet<LinqGameChat> _LinqGameChats;
	
	private EntitySet<UserSession> _UserSessions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnVerificationTokenChanging(string value);
    partial void OnVerificationTokenChanged();
    partial void OnJoinDateChanging(System.DateTime value);
    partial void OnJoinDateChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    #endregion
	
	public User()
	{
		this._LinqGamePlayers = new EntitySet<LinqGamePlayer>(new Action<LinqGamePlayer>(this.attach_LinqGamePlayers), new Action<LinqGamePlayer>(this.detach_LinqGamePlayers));
		this._LinqGames = new EntitySet<LinqGame>(new Action<LinqGame>(this.attach_LinqGames), new Action<LinqGame>(this.detach_LinqGames));
		this._LinqGameChats = new EntitySet<LinqGameChat>(new Action<LinqGameChat>(this.attach_LinqGameChats), new Action<LinqGameChat>(this.detach_LinqGameChats));
		this._UserSessions = new EntitySet<UserSession>(new Action<UserSession>(this.attach_UserSessions), new Action<UserSession>(this.detach_UserSessions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Nickname
	{
		get
		{
			return this._Nickname;
		}
		set
		{
			if ((this._Nickname != value))
			{
				this.OnNicknameChanging(value);
				this.SendPropertyChanging();
				this._Nickname = value;
				this.SendPropertyChanged("Nickname");
				this.OnNicknameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VerificationToken", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
	public string VerificationToken
	{
		get
		{
			return this._VerificationToken;
		}
		set
		{
			if ((this._VerificationToken != value))
			{
				this.OnVerificationTokenChanging(value);
				this.SendPropertyChanging();
				this._VerificationToken = value;
				this.SendPropertyChanged("VerificationToken");
				this.OnVerificationTokenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinDate", DbType="DateTime NOT NULL")]
	public System.DateTime JoinDate
	{
		get
		{
			return this._JoinDate;
		}
		set
		{
			if ((this._JoinDate != value))
			{
				this.OnJoinDateChanging(value);
				this.SendPropertyChanging();
				this._JoinDate = value;
				this.SendPropertyChanged("JoinDate");
				this.OnJoinDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
	public bool IsAdmin
	{
		get
		{
			return this._IsAdmin;
		}
		set
		{
			if ((this._IsAdmin != value))
			{
				this.OnIsAdminChanging(value);
				this.SendPropertyChanging();
				this._IsAdmin = value;
				this.SendPropertyChanged("IsAdmin");
				this.OnIsAdminChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LinqGamePlayer", Storage="_LinqGamePlayers", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<LinqGamePlayer> LinqGamePlayers
	{
		get
		{
			return this._LinqGamePlayers;
		}
		set
		{
			this._LinqGamePlayers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LinqGame", Storage="_LinqGames", ThisKey="UserID", OtherKey="CreatorUserID")]
	public EntitySet<LinqGame> LinqGames
	{
		get
		{
			return this._LinqGames;
		}
		set
		{
			this._LinqGames.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LinqGameChat", Storage="_LinqGameChats", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<LinqGameChat> LinqGameChats
	{
		get
		{
			return this._LinqGameChats;
		}
		set
		{
			this._LinqGameChats.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSession", Storage="_UserSessions", ThisKey="UserID", OtherKey="UserID")]
	public EntitySet<UserSession> UserSessions
	{
		get
		{
			return this._UserSessions;
		}
		set
		{
			this._UserSessions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LinqGamePlayers(LinqGamePlayer entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_LinqGamePlayers(LinqGamePlayer entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_LinqGames(LinqGame entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_LinqGames(LinqGame entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_LinqGameChats(LinqGameChat entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_LinqGameChats(LinqGameChat entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_UserSessions(UserSession entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_UserSessions(UserSession entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqGames")]
public partial class LinqGame : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GameID;
	
	private bool _PlayToScore;
	
	private bool _PlayToRounds;
	
	private System.Nullable<int> _Limit;
	
	private System.DateTime _DateCreated;
	
	private System.Nullable<System.DateTime> _DateFinished;
	
	private System.DateTime _DateLastAction;
	
	private bool _IsStarted;
	
	private bool _IsFinished;
	
	private int _CreatorUserID;
	
	private EntitySet<LinqGamePlayer> _LinqGamePlayers;
	
	private EntitySet<LinqGameSeries> _LinqGameSeries;
	
	private EntitySet<LinqGameChat> _LinqGameChats;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnPlayToScoreChanging(bool value);
    partial void OnPlayToScoreChanged();
    partial void OnPlayToRoundsChanging(bool value);
    partial void OnPlayToRoundsChanged();
    partial void OnLimitChanging(System.Nullable<int> value);
    partial void OnLimitChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateFinishedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinishedChanged();
    partial void OnDateLastActionChanging(System.DateTime value);
    partial void OnDateLastActionChanged();
    partial void OnIsStartedChanging(bool value);
    partial void OnIsStartedChanged();
    partial void OnIsFinishedChanging(bool value);
    partial void OnIsFinishedChanged();
    partial void OnCreatorUserIDChanging(int value);
    partial void OnCreatorUserIDChanged();
    #endregion
	
	public LinqGame()
	{
		this._LinqGamePlayers = new EntitySet<LinqGamePlayer>(new Action<LinqGamePlayer>(this.attach_LinqGamePlayers), new Action<LinqGamePlayer>(this.detach_LinqGamePlayers));
		this._LinqGameSeries = new EntitySet<LinqGameSeries>(new Action<LinqGameSeries>(this.attach_LinqGameSeries), new Action<LinqGameSeries>(this.detach_LinqGameSeries));
		this._LinqGameChats = new EntitySet<LinqGameChat>(new Action<LinqGameChat>(this.attach_LinqGameChats), new Action<LinqGameChat>(this.detach_LinqGameChats));
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayToScore", DbType="Bit NOT NULL")]
	public bool PlayToScore
	{
		get
		{
			return this._PlayToScore;
		}
		set
		{
			if ((this._PlayToScore != value))
			{
				this.OnPlayToScoreChanging(value);
				this.SendPropertyChanging();
				this._PlayToScore = value;
				this.SendPropertyChanged("PlayToScore");
				this.OnPlayToScoreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayToRounds", DbType="Bit NOT NULL")]
	public bool PlayToRounds
	{
		get
		{
			return this._PlayToRounds;
		}
		set
		{
			if ((this._PlayToRounds != value))
			{
				this.OnPlayToRoundsChanging(value);
				this.SendPropertyChanging();
				this._PlayToRounds = value;
				this.SendPropertyChanged("PlayToRounds");
				this.OnPlayToRoundsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Limit", DbType="Int")]
	public System.Nullable<int> Limit
	{
		get
		{
			return this._Limit;
		}
		set
		{
			if ((this._Limit != value))
			{
				this.OnLimitChanging(value);
				this.SendPropertyChanging();
				this._Limit = value;
				this.SendPropertyChanged("Limit");
				this.OnLimitChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
	public System.DateTime DateCreated
	{
		get
		{
			return this._DateCreated;
		}
		set
		{
			if ((this._DateCreated != value))
			{
				this.OnDateCreatedChanging(value);
				this.SendPropertyChanging();
				this._DateCreated = value;
				this.SendPropertyChanged("DateCreated");
				this.OnDateCreatedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFinished", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateFinished
	{
		get
		{
			return this._DateFinished;
		}
		set
		{
			if ((this._DateFinished != value))
			{
				this.OnDateFinishedChanging(value);
				this.SendPropertyChanging();
				this._DateFinished = value;
				this.SendPropertyChanged("DateFinished");
				this.OnDateFinishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateLastAction", DbType="DateTime NOT NULL")]
	public System.DateTime DateLastAction
	{
		get
		{
			return this._DateLastAction;
		}
		set
		{
			if ((this._DateLastAction != value))
			{
				this.OnDateLastActionChanging(value);
				this.SendPropertyChanging();
				this._DateLastAction = value;
				this.SendPropertyChanged("DateLastAction");
				this.OnDateLastActionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStarted", DbType="Bit NOT NULL")]
	public bool IsStarted
	{
		get
		{
			return this._IsStarted;
		}
		set
		{
			if ((this._IsStarted != value))
			{
				this.OnIsStartedChanging(value);
				this.SendPropertyChanging();
				this._IsStarted = value;
				this.SendPropertyChanged("IsStarted");
				this.OnIsStartedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinished", DbType="Bit NOT NULL")]
	public bool IsFinished
	{
		get
		{
			return this._IsFinished;
		}
		set
		{
			if ((this._IsFinished != value))
			{
				this.OnIsFinishedChanging(value);
				this.SendPropertyChanging();
				this._IsFinished = value;
				this.SendPropertyChanged("IsFinished");
				this.OnIsFinishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorUserID", DbType="Int NOT NULL")]
	public int CreatorUserID
	{
		get
		{
			return this._CreatorUserID;
		}
		set
		{
			if ((this._CreatorUserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatorUserIDChanging(value);
				this.SendPropertyChanging();
				this._CreatorUserID = value;
				this.SendPropertyChanged("CreatorUserID");
				this.OnCreatorUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGame_LinqGamePlayer", Storage="_LinqGamePlayers", ThisKey="GameID", OtherKey="GameID")]
	public EntitySet<LinqGamePlayer> LinqGamePlayers
	{
		get
		{
			return this._LinqGamePlayers;
		}
		set
		{
			this._LinqGamePlayers.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGame_LinqGameSeries", Storage="_LinqGameSeries", ThisKey="GameID", OtherKey="GameID")]
	public EntitySet<LinqGameSeries> LinqGameSeries
	{
		get
		{
			return this._LinqGameSeries;
		}
		set
		{
			this._LinqGameSeries.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGame_LinqGameChat", Storage="_LinqGameChats", ThisKey="GameID", OtherKey="GameID")]
	public EntitySet<LinqGameChat> LinqGameChats
	{
		get
		{
			return this._LinqGameChats;
		}
		set
		{
			this._LinqGameChats.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LinqGame", Storage="_User", ThisKey="CreatorUserID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.LinqGames.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.LinqGames.Add(this);
					this._CreatorUserID = value.UserID;
				}
				else
				{
					this._CreatorUserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LinqGamePlayers(LinqGamePlayer entity)
	{
		this.SendPropertyChanging();
		entity.LinqGame = this;
	}
	
	private void detach_LinqGamePlayers(LinqGamePlayer entity)
	{
		this.SendPropertyChanging();
		entity.LinqGame = null;
	}
	
	private void attach_LinqGameSeries(LinqGameSeries entity)
	{
		this.SendPropertyChanging();
		entity.LinqGame = this;
	}
	
	private void detach_LinqGameSeries(LinqGameSeries entity)
	{
		this.SendPropertyChanging();
		entity.LinqGame = null;
	}
	
	private void attach_LinqGameChats(LinqGameChat entity)
	{
		this.SendPropertyChanging();
		entity.LinqGame = this;
	}
	
	private void detach_LinqGameChats(LinqGameChat entity)
	{
		this.SendPropertyChanging();
		entity.LinqGame = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqGameSeries")]
public partial class LinqGameSeries : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SeriesID;
	
	private int _GameID;
	
	private int _WordID;
	
	private bool _IsFinished;
	
	private EntitySet<LinqSeriesRound> _LinqSeriesRounds;
	
	private EntityRef<LinqGame> _LinqGame;
	
	private EntityRef<LinqWord> _LinqWord;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnWordIDChanging(int value);
    partial void OnWordIDChanged();
    partial void OnIsFinishedChanging(bool value);
    partial void OnIsFinishedChanged();
    #endregion
	
	public LinqGameSeries()
	{
		this._LinqSeriesRounds = new EntitySet<LinqSeriesRound>(new Action<LinqSeriesRound>(this.attach_LinqSeriesRounds), new Action<LinqSeriesRound>(this.detach_LinqSeriesRounds));
		this._LinqGame = default(EntityRef<LinqGame>);
		this._LinqWord = default(EntityRef<LinqWord>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SeriesID
	{
		get
		{
			return this._SeriesID;
		}
		set
		{
			if ((this._SeriesID != value))
			{
				this.OnSeriesIDChanging(value);
				this.SendPropertyChanging();
				this._SeriesID = value;
				this.SendPropertyChanged("SeriesID");
				this.OnSeriesIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				if (this._LinqGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordID", DbType="Int NOT NULL")]
	public int WordID
	{
		get
		{
			return this._WordID;
		}
		set
		{
			if ((this._WordID != value))
			{
				if (this._LinqWord.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWordIDChanging(value);
				this.SendPropertyChanging();
				this._WordID = value;
				this.SendPropertyChanged("WordID");
				this.OnWordIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinished", DbType="Bit NOT NULL")]
	public bool IsFinished
	{
		get
		{
			return this._IsFinished;
		}
		set
		{
			if ((this._IsFinished != value))
			{
				this.OnIsFinishedChanging(value);
				this.SendPropertyChanging();
				this._IsFinished = value;
				this.SendPropertyChanged("IsFinished");
				this.OnIsFinishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGameSeries_LinqSeriesRound", Storage="_LinqSeriesRounds", ThisKey="SeriesID", OtherKey="SeriesID")]
	public EntitySet<LinqSeriesRound> LinqSeriesRounds
	{
		get
		{
			return this._LinqSeriesRounds;
		}
		set
		{
			this._LinqSeriesRounds.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGame_LinqGameSeries", Storage="_LinqGame", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
	public LinqGame LinqGame
	{
		get
		{
			return this._LinqGame.Entity;
		}
		set
		{
			LinqGame previousValue = this._LinqGame.Entity;
			if (((previousValue != value) 
						|| (this._LinqGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqGame.Entity = null;
					previousValue.LinqGameSeries.Remove(this);
				}
				this._LinqGame.Entity = value;
				if ((value != null))
				{
					value.LinqGameSeries.Add(this);
					this._GameID = value.GameID;
				}
				else
				{
					this._GameID = default(int);
				}
				this.SendPropertyChanged("LinqGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqWord_LinqGameSeries", Storage="_LinqWord", ThisKey="WordID", OtherKey="WordID", IsForeignKey=true)]
	public LinqWord LinqWord
	{
		get
		{
			return this._LinqWord.Entity;
		}
		set
		{
			LinqWord previousValue = this._LinqWord.Entity;
			if (((previousValue != value) 
						|| (this._LinqWord.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqWord.Entity = null;
					previousValue.LinqGameSeries.Remove(this);
				}
				this._LinqWord.Entity = value;
				if ((value != null))
				{
					value.LinqGameSeries.Add(this);
					this._WordID = value.WordID;
				}
				else
				{
					this._WordID = default(int);
				}
				this.SendPropertyChanged("LinqWord");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LinqSeriesRounds(LinqSeriesRound entity)
	{
		this.SendPropertyChanging();
		entity.LinqGameSeries = this;
	}
	
	private void detach_LinqSeriesRounds(LinqSeriesRound entity)
	{
		this.SendPropertyChanging();
		entity.LinqGameSeries = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqRoundGuesses")]
public partial class LinqRoundGuess
{
	
	private int _ResultID;
	
	private int _GuessedPlayerID;
	
	public LinqRoundGuess()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", DbType="Int NOT NULL")]
	public int ResultID
	{
		get
		{
			return this._ResultID;
		}
		set
		{
			if ((this._ResultID != value))
			{
				this._ResultID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuessedPlayerID", DbType="Int NOT NULL")]
	public int GuessedPlayerID
	{
		get
		{
			return this._GuessedPlayerID;
		}
		set
		{
			if ((this._GuessedPlayerID != value))
			{
				this._GuessedPlayerID = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqRoundResults")]
public partial class LinqRoundResult : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ResultID;
	
	private int _RoundID;
	
	private int _PlayerID;
	
	private bool _IsActive;
	
	private string _SubmittedClue;
	
	private bool _IsGuessed;
	
	private EntityRef<LinqGamePlayer> _LinqGamePlayer;
	
	private EntityRef<LinqSeriesRound> _LinqSeriesRound;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResultIDChanging(int value);
    partial void OnResultIDChanged();
    partial void OnRoundIDChanging(int value);
    partial void OnRoundIDChanged();
    partial void OnPlayerIDChanging(int value);
    partial void OnPlayerIDChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnSubmittedClueChanging(string value);
    partial void OnSubmittedClueChanged();
    partial void OnIsGuessedChanging(bool value);
    partial void OnIsGuessedChanged();
    #endregion
	
	public LinqRoundResult()
	{
		this._LinqGamePlayer = default(EntityRef<LinqGamePlayer>);
		this._LinqSeriesRound = default(EntityRef<LinqSeriesRound>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ResultID
	{
		get
		{
			return this._ResultID;
		}
		set
		{
			if ((this._ResultID != value))
			{
				this.OnResultIDChanging(value);
				this.SendPropertyChanging();
				this._ResultID = value;
				this.SendPropertyChanged("ResultID");
				this.OnResultIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundID", DbType="Int NOT NULL")]
	public int RoundID
	{
		get
		{
			return this._RoundID;
		}
		set
		{
			if ((this._RoundID != value))
			{
				if (this._LinqSeriesRound.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnRoundIDChanging(value);
				this.SendPropertyChanging();
				this._RoundID = value;
				this.SendPropertyChanged("RoundID");
				this.OnRoundIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerID", DbType="Int NOT NULL")]
	public int PlayerID
	{
		get
		{
			return this._PlayerID;
		}
		set
		{
			if ((this._PlayerID != value))
			{
				if (this._LinqGamePlayer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPlayerIDChanging(value);
				this.SendPropertyChanging();
				this._PlayerID = value;
				this.SendPropertyChanged("PlayerID");
				this.OnPlayerIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
	public bool IsActive
	{
		get
		{
			return this._IsActive;
		}
		set
		{
			if ((this._IsActive != value))
			{
				this.OnIsActiveChanging(value);
				this.SendPropertyChanging();
				this._IsActive = value;
				this.SendPropertyChanged("IsActive");
				this.OnIsActiveChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubmittedClue", DbType="VarChar(50)")]
	public string SubmittedClue
	{
		get
		{
			return this._SubmittedClue;
		}
		set
		{
			if ((this._SubmittedClue != value))
			{
				this.OnSubmittedClueChanging(value);
				this.SendPropertyChanging();
				this._SubmittedClue = value;
				this.SendPropertyChanged("SubmittedClue");
				this.OnSubmittedClueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGuessed", DbType="Bit NOT NULL")]
	public bool IsGuessed
	{
		get
		{
			return this._IsGuessed;
		}
		set
		{
			if ((this._IsGuessed != value))
			{
				this.OnIsGuessedChanging(value);
				this.SendPropertyChanging();
				this._IsGuessed = value;
				this.SendPropertyChanged("IsGuessed");
				this.OnIsGuessedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGamePlayer_LinqRoundResult", Storage="_LinqGamePlayer", ThisKey="PlayerID", OtherKey="GamePlayerID", IsForeignKey=true)]
	public LinqGamePlayer LinqGamePlayer
	{
		get
		{
			return this._LinqGamePlayer.Entity;
		}
		set
		{
			LinqGamePlayer previousValue = this._LinqGamePlayer.Entity;
			if (((previousValue != value) 
						|| (this._LinqGamePlayer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqGamePlayer.Entity = null;
					previousValue.LinqRoundResults.Remove(this);
				}
				this._LinqGamePlayer.Entity = value;
				if ((value != null))
				{
					value.LinqRoundResults.Add(this);
					this._PlayerID = value.GamePlayerID;
				}
				else
				{
					this._PlayerID = default(int);
				}
				this.SendPropertyChanged("LinqGamePlayer");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqSeriesRound_LinqRoundResult", Storage="_LinqSeriesRound", ThisKey="RoundID", OtherKey="RoundID", IsForeignKey=true)]
	public LinqSeriesRound LinqSeriesRound
	{
		get
		{
			return this._LinqSeriesRound.Entity;
		}
		set
		{
			LinqSeriesRound previousValue = this._LinqSeriesRound.Entity;
			if (((previousValue != value) 
						|| (this._LinqSeriesRound.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqSeriesRound.Entity = null;
					previousValue.LinqRoundResults.Remove(this);
				}
				this._LinqSeriesRound.Entity = value;
				if ((value != null))
				{
					value.LinqRoundResults.Add(this);
					this._RoundID = value.RoundID;
				}
				else
				{
					this._RoundID = default(int);
				}
				this.SendPropertyChanged("LinqSeriesRound");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqSeriesRound")]
public partial class LinqSeriesRound : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RoundID;
	
	private int _SeriesID;
	
	private bool _IsFinished;
	
	private System.Nullable<int> _WaitingOnPlayer;
	
	private EntitySet<LinqRoundResult> _LinqRoundResults;
	
	private EntityRef<LinqGameSeries> _LinqGameSery;
	
	private EntityRef<LinqGamePlayer> _LinqGamePlayer;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoundIDChanging(int value);
    partial void OnRoundIDChanged();
    partial void OnSeriesIDChanging(int value);
    partial void OnSeriesIDChanged();
    partial void OnIsFinishedChanging(bool value);
    partial void OnIsFinishedChanged();
    partial void OnWaitingOnPlayerChanging(System.Nullable<int> value);
    partial void OnWaitingOnPlayerChanged();
    #endregion
	
	public LinqSeriesRound()
	{
		this._LinqRoundResults = new EntitySet<LinqRoundResult>(new Action<LinqRoundResult>(this.attach_LinqRoundResults), new Action<LinqRoundResult>(this.detach_LinqRoundResults));
		this._LinqGameSery = default(EntityRef<LinqGameSeries>);
		this._LinqGamePlayer = default(EntityRef<LinqGamePlayer>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RoundID
	{
		get
		{
			return this._RoundID;
		}
		set
		{
			if ((this._RoundID != value))
			{
				this.OnRoundIDChanging(value);
				this.SendPropertyChanging();
				this._RoundID = value;
				this.SendPropertyChanged("RoundID");
				this.OnRoundIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", DbType="Int NOT NULL")]
	public int SeriesID
	{
		get
		{
			return this._SeriesID;
		}
		set
		{
			if ((this._SeriesID != value))
			{
				if (this._LinqGameSery.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSeriesIDChanging(value);
				this.SendPropertyChanging();
				this._SeriesID = value;
				this.SendPropertyChanged("SeriesID");
				this.OnSeriesIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFinished", DbType="Bit NOT NULL")]
	public bool IsFinished
	{
		get
		{
			return this._IsFinished;
		}
		set
		{
			if ((this._IsFinished != value))
			{
				this.OnIsFinishedChanging(value);
				this.SendPropertyChanging();
				this._IsFinished = value;
				this.SendPropertyChanged("IsFinished");
				this.OnIsFinishedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WaitingOnPlayer", DbType="Int")]
	public System.Nullable<int> WaitingOnPlayer
	{
		get
		{
			return this._WaitingOnPlayer;
		}
		set
		{
			if ((this._WaitingOnPlayer != value))
			{
				if (this._LinqGamePlayer.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnWaitingOnPlayerChanging(value);
				this.SendPropertyChanging();
				this._WaitingOnPlayer = value;
				this.SendPropertyChanged("WaitingOnPlayer");
				this.OnWaitingOnPlayerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqSeriesRound_LinqRoundResult", Storage="_LinqRoundResults", ThisKey="RoundID", OtherKey="RoundID")]
	public EntitySet<LinqRoundResult> LinqRoundResults
	{
		get
		{
			return this._LinqRoundResults;
		}
		set
		{
			this._LinqRoundResults.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGameSeries_LinqSeriesRound", Storage="_LinqGameSery", ThisKey="SeriesID", OtherKey="SeriesID", IsForeignKey=true)]
	public LinqGameSeries LinqGameSeries
	{
		get
		{
			return this._LinqGameSery.Entity;
		}
		set
		{
			LinqGameSeries previousValue = this._LinqGameSery.Entity;
			if (((previousValue != value) 
						|| (this._LinqGameSery.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqGameSery.Entity = null;
					previousValue.LinqSeriesRounds.Remove(this);
				}
				this._LinqGameSery.Entity = value;
				if ((value != null))
				{
					value.LinqSeriesRounds.Add(this);
					this._SeriesID = value.SeriesID;
				}
				else
				{
					this._SeriesID = default(int);
				}
				this.SendPropertyChanged("LinqGameSeries");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGamePlayer_LinqSeriesRound", Storage="_LinqGamePlayer", ThisKey="WaitingOnPlayer", OtherKey="GamePlayerID", IsForeignKey=true)]
	public LinqGamePlayer LinqGamePlayer
	{
		get
		{
			return this._LinqGamePlayer.Entity;
		}
		set
		{
			LinqGamePlayer previousValue = this._LinqGamePlayer.Entity;
			if (((previousValue != value) 
						|| (this._LinqGamePlayer.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqGamePlayer.Entity = null;
					previousValue.LinqSeriesRounds.Remove(this);
				}
				this._LinqGamePlayer.Entity = value;
				if ((value != null))
				{
					value.LinqSeriesRounds.Add(this);
					this._WaitingOnPlayer = value.GamePlayerID;
				}
				else
				{
					this._WaitingOnPlayer = default(Nullable<int>);
				}
				this.SendPropertyChanged("LinqGamePlayer");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LinqRoundResults(LinqRoundResult entity)
	{
		this.SendPropertyChanging();
		entity.LinqSeriesRound = this;
	}
	
	private void detach_LinqRoundResults(LinqRoundResult entity)
	{
		this.SendPropertyChanging();
		entity.LinqSeriesRound = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqSeriesScores")]
public partial class LinqSeriesScore
{
	
	private int _SeriesID;
	
	private int _GamePlayerID;
	
	private int _Score;
	
	public LinqSeriesScore()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", DbType="Int NOT NULL")]
	public int SeriesID
	{
		get
		{
			return this._SeriesID;
		}
		set
		{
			if ((this._SeriesID != value))
			{
				this._SeriesID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GamePlayerID", DbType="Int NOT NULL")]
	public int GamePlayerID
	{
		get
		{
			return this._GamePlayerID;
		}
		set
		{
			if ((this._GamePlayerID != value))
			{
				this._GamePlayerID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int NOT NULL")]
	public int Score
	{
		get
		{
			return this._Score;
		}
		set
		{
			if ((this._Score != value))
			{
				this._Score = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqSeriesSpies")]
public partial class LinqSeriesSpy
{
	
	private int _SeriesID;
	
	private int _SpyPlayerID;
	
	public LinqSeriesSpy()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeriesID", DbType="Int NOT NULL")]
	public int SeriesID
	{
		get
		{
			return this._SeriesID;
		}
		set
		{
			if ((this._SeriesID != value))
			{
				this._SeriesID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpyPlayerID", DbType="Int NOT NULL")]
	public int SpyPlayerID
	{
		get
		{
			return this._SpyPlayerID;
		}
		set
		{
			if ((this._SpyPlayerID != value))
			{
				this._SpyPlayerID = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqWords")]
public partial class LinqWord : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _WordID;
	
	private string _Word;
	
	private bool _IsRemoved;
	
	private EntitySet<LinqGameSeries> _LinqGameSeries;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWordIDChanging(int value);
    partial void OnWordIDChanged();
    partial void OnWordChanging(string value);
    partial void OnWordChanged();
    partial void OnIsRemovedChanging(bool value);
    partial void OnIsRemovedChanged();
    #endregion
	
	public LinqWord()
	{
		this._LinqGameSeries = new EntitySet<LinqGameSeries>(new Action<LinqGameSeries>(this.attach_LinqGameSeries), new Action<LinqGameSeries>(this.detach_LinqGameSeries));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WordID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int WordID
	{
		get
		{
			return this._WordID;
		}
		set
		{
			if ((this._WordID != value))
			{
				this.OnWordIDChanging(value);
				this.SendPropertyChanging();
				this._WordID = value;
				this.SendPropertyChanged("WordID");
				this.OnWordIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Word", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string Word
	{
		get
		{
			return this._Word;
		}
		set
		{
			if ((this._Word != value))
			{
				this.OnWordChanging(value);
				this.SendPropertyChanging();
				this._Word = value;
				this.SendPropertyChanged("Word");
				this.OnWordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRemoved", DbType="Bit NOT NULL")]
	public bool IsRemoved
	{
		get
		{
			return this._IsRemoved;
		}
		set
		{
			if ((this._IsRemoved != value))
			{
				this.OnIsRemovedChanging(value);
				this.SendPropertyChanging();
				this._IsRemoved = value;
				this.SendPropertyChanged("IsRemoved");
				this.OnIsRemovedChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqWord_LinqGameSeries", Storage="_LinqGameSeries", ThisKey="WordID", OtherKey="WordID")]
	public EntitySet<LinqGameSeries> LinqGameSeries
	{
		get
		{
			return this._LinqGameSeries;
		}
		set
		{
			this._LinqGameSeries.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_LinqGameSeries(LinqGameSeries entity)
	{
		this.SendPropertyChanging();
		entity.LinqWord = this;
	}
	
	private void detach_LinqGameSeries(LinqGameSeries entity)
	{
		this.SendPropertyChanging();
		entity.LinqWord = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.Options")]
public partial class Option : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _OptionID;
	
	private int _SettingID;
	
	private string _SettingText;
	
	private EntityRef<Setting> _Setting;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOptionIDChanging(int value);
    partial void OnOptionIDChanged();
    partial void OnSettingIDChanging(int value);
    partial void OnSettingIDChanged();
    partial void OnSettingTextChanging(string value);
    partial void OnSettingTextChanged();
    #endregion
	
	public Option()
	{
		this._Setting = default(EntityRef<Setting>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int OptionID
	{
		get
		{
			return this._OptionID;
		}
		set
		{
			if ((this._OptionID != value))
			{
				this.OnOptionIDChanging(value);
				this.SendPropertyChanging();
				this._OptionID = value;
				this.SendPropertyChanged("OptionID");
				this.OnOptionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingID", DbType="Int NOT NULL")]
	public int SettingID
	{
		get
		{
			return this._SettingID;
		}
		set
		{
			if ((this._SettingID != value))
			{
				if (this._Setting.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSettingIDChanging(value);
				this.SendPropertyChanging();
				this._SettingID = value;
				this.SendPropertyChanged("SettingID");
				this.OnSettingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingText", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string SettingText
	{
		get
		{
			return this._SettingText;
		}
		set
		{
			if ((this._SettingText != value))
			{
				this.OnSettingTextChanging(value);
				this.SendPropertyChanging();
				this._SettingText = value;
				this.SendPropertyChanged("SettingText");
				this.OnSettingTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Setting_Option", Storage="_Setting", ThisKey="SettingID", OtherKey="SettingID", IsForeignKey=true)]
	public Setting Setting
	{
		get
		{
			return this._Setting.Entity;
		}
		set
		{
			Setting previousValue = this._Setting.Entity;
			if (((previousValue != value) 
						|| (this._Setting.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Setting.Entity = null;
					previousValue.Options.Remove(this);
				}
				this._Setting.Entity = value;
				if ((value != null))
				{
					value.Options.Add(this);
					this._SettingID = value.SettingID;
				}
				else
				{
					this._SettingID = default(int);
				}
				this.SendPropertyChanged("Setting");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.Preferences")]
public partial class Preference
{
	
	private int _UserID;
	
	private int _SettingID;
	
	private System.Nullable<int> _OptionID;
	
	private string _PreferenceValue;
	
	public Preference()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				this._UserID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingID", DbType="Int NOT NULL")]
	public int SettingID
	{
		get
		{
			return this._SettingID;
		}
		set
		{
			if ((this._SettingID != value))
			{
				this._SettingID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionID", DbType="Int")]
	public System.Nullable<int> OptionID
	{
		get
		{
			return this._OptionID;
		}
		set
		{
			if ((this._OptionID != value))
			{
				this._OptionID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferenceValue", DbType="VarChar(50)")]
	public string PreferenceValue
	{
		get
		{
			return this._PreferenceValue;
		}
		set
		{
			if ((this._PreferenceValue != value))
			{
				this._PreferenceValue = value;
			}
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.Settings")]
public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SettingID;
	
	private string _SettingCode;
	
	private string _SettingTitle;
	
	private bool _HasOptions;
	
	private System.Nullable<bool> _MultiSelectOptions;
	
	private EntitySet<Option> _Options;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIDChanging(int value);
    partial void OnSettingIDChanged();
    partial void OnSettingCodeChanging(string value);
    partial void OnSettingCodeChanged();
    partial void OnSettingTitleChanging(string value);
    partial void OnSettingTitleChanged();
    partial void OnHasOptionsChanging(bool value);
    partial void OnHasOptionsChanged();
    partial void OnMultiSelectOptionsChanging(System.Nullable<bool> value);
    partial void OnMultiSelectOptionsChanged();
    #endregion
	
	public Setting()
	{
		this._Options = new EntitySet<Option>(new Action<Option>(this.attach_Options), new Action<Option>(this.detach_Options));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int SettingID
	{
		get
		{
			return this._SettingID;
		}
		set
		{
			if ((this._SettingID != value))
			{
				this.OnSettingIDChanging(value);
				this.SendPropertyChanging();
				this._SettingID = value;
				this.SendPropertyChanged("SettingID");
				this.OnSettingIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
	public string SettingCode
	{
		get
		{
			return this._SettingCode;
		}
		set
		{
			if ((this._SettingCode != value))
			{
				this.OnSettingCodeChanging(value);
				this.SendPropertyChanging();
				this._SettingCode = value;
				this.SendPropertyChanged("SettingCode");
				this.OnSettingCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingTitle", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
	public string SettingTitle
	{
		get
		{
			return this._SettingTitle;
		}
		set
		{
			if ((this._SettingTitle != value))
			{
				this.OnSettingTitleChanging(value);
				this.SendPropertyChanging();
				this._SettingTitle = value;
				this.SendPropertyChanged("SettingTitle");
				this.OnSettingTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasOptions", DbType="Bit NOT NULL")]
	public bool HasOptions
	{
		get
		{
			return this._HasOptions;
		}
		set
		{
			if ((this._HasOptions != value))
			{
				this.OnHasOptionsChanging(value);
				this.SendPropertyChanging();
				this._HasOptions = value;
				this.SendPropertyChanged("HasOptions");
				this.OnHasOptionsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MultiSelectOptions", DbType="Bit")]
	public System.Nullable<bool> MultiSelectOptions
	{
		get
		{
			return this._MultiSelectOptions;
		}
		set
		{
			if ((this._MultiSelectOptions != value))
			{
				this.OnMultiSelectOptionsChanging(value);
				this.SendPropertyChanging();
				this._MultiSelectOptions = value;
				this.SendPropertyChanged("MultiSelectOptions");
				this.OnMultiSelectOptionsChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Setting_Option", Storage="_Options", ThisKey="SettingID", OtherKey="SettingID")]
	public EntitySet<Option> Options
	{
		get
		{
			return this._Options;
		}
		set
		{
			this._Options.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Options(Option entity)
	{
		this.SendPropertyChanging();
		entity.Setting = this;
	}
	
	private void detach_Options(Option entity)
	{
		this.SendPropertyChanging();
		entity.Setting = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.LinqGameChat")]
public partial class LinqGameChat : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ChatLineID;
	
	private int _GameID;
	
	private System.DateTime _PostedAt;
	
	private int _UserID;
	
	private string _ChatText;
	
	private System.Nullable<bool> _IsExCathedra;
	
	private EntityRef<LinqGame> _LinqGame;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChatLineIDChanging(int value);
    partial void OnChatLineIDChanged();
    partial void OnGameIDChanging(int value);
    partial void OnGameIDChanged();
    partial void OnPostedAtChanging(System.DateTime value);
    partial void OnPostedAtChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnChatTextChanging(string value);
    partial void OnChatTextChanged();
    partial void OnIsExCathedraChanging(System.Nullable<bool> value);
    partial void OnIsExCathedraChanged();
    #endregion
	
	public LinqGameChat()
	{
		this._LinqGame = default(EntityRef<LinqGame>);
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ChatLineID
	{
		get
		{
			return this._ChatLineID;
		}
		set
		{
			if ((this._ChatLineID != value))
			{
				this.OnChatLineIDChanging(value);
				this.SendPropertyChanging();
				this._ChatLineID = value;
				this.SendPropertyChanged("ChatLineID");
				this.OnChatLineIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameID", DbType="Int NOT NULL")]
	public int GameID
	{
		get
		{
			return this._GameID;
		}
		set
		{
			if ((this._GameID != value))
			{
				if (this._LinqGame.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGameIDChanging(value);
				this.SendPropertyChanging();
				this._GameID = value;
				this.SendPropertyChanged("GameID");
				this.OnGameIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedAt", DbType="DateTime NOT NULL")]
	public System.DateTime PostedAt
	{
		get
		{
			return this._PostedAt;
		}
		set
		{
			if ((this._PostedAt != value))
			{
				this.OnPostedAtChanging(value);
				this.SendPropertyChanging();
				this._PostedAt = value;
				this.SendPropertyChanged("PostedAt");
				this.OnPostedAtChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatText", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string ChatText
	{
		get
		{
			return this._ChatText;
		}
		set
		{
			if ((this._ChatText != value))
			{
				this.OnChatTextChanging(value);
				this.SendPropertyChanging();
				this._ChatText = value;
				this.SendPropertyChanged("ChatText");
				this.OnChatTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExCathedra", DbType="Bit")]
	public System.Nullable<bool> IsExCathedra
	{
		get
		{
			return this._IsExCathedra;
		}
		set
		{
			if ((this._IsExCathedra != value))
			{
				this.OnIsExCathedraChanging(value);
				this.SendPropertyChanging();
				this._IsExCathedra = value;
				this.SendPropertyChanged("IsExCathedra");
				this.OnIsExCathedraChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinqGame_LinqGameChat", Storage="_LinqGame", ThisKey="GameID", OtherKey="GameID", IsForeignKey=true)]
	public LinqGame LinqGame
	{
		get
		{
			return this._LinqGame.Entity;
		}
		set
		{
			LinqGame previousValue = this._LinqGame.Entity;
			if (((previousValue != value) 
						|| (this._LinqGame.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LinqGame.Entity = null;
					previousValue.LinqGameChats.Remove(this);
				}
				this._LinqGame.Entity = value;
				if ((value != null))
				{
					value.LinqGameChats.Add(this);
					this._GameID = value.GameID;
				}
				else
				{
					this._GameID = default(int);
				}
				this.SendPropertyChanged("LinqGame");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LinqGameChat", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.LinqGameChats.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.LinqGameChats.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="kylehill.UserSessions")]
public partial class UserSession : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _SessionToken;
	
	private int _UserID;
	
	private System.Nullable<System.DateTime> _ExpiresOn;
	
	private EntityRef<User> _User;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionTokenChanging(string value);
    partial void OnSessionTokenChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnExpiresOnChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiresOnChanged();
    #endregion
	
	public UserSession()
	{
		this._User = default(EntityRef<User>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionToken", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string SessionToken
	{
		get
		{
			return this._SessionToken;
		}
		set
		{
			if ((this._SessionToken != value))
			{
				this.OnSessionTokenChanging(value);
				this.SendPropertyChanging();
				this._SessionToken = value;
				this.SendPropertyChanged("SessionToken");
				this.OnSessionTokenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
	public int UserID
	{
		get
		{
			return this._UserID;
		}
		set
		{
			if ((this._UserID != value))
			{
				if (this._User.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserIDChanging(value);
				this.SendPropertyChanging();
				this._UserID = value;
				this.SendPropertyChanged("UserID");
				this.OnUserIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiresOn", DbType="DateTime")]
	public System.Nullable<System.DateTime> ExpiresOn
	{
		get
		{
			return this._ExpiresOn;
		}
		set
		{
			if ((this._ExpiresOn != value))
			{
				this.OnExpiresOnChanging(value);
				this.SendPropertyChanging();
				this._ExpiresOn = value;
				this.SendPropertyChanged("ExpiresOn");
				this.OnExpiresOnChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSession", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.UserSessions.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.UserSessions.Add(this);
					this._UserID = value.UserID;
				}
				else
				{
					this._UserID = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
